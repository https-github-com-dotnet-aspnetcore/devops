// Decompiled with JetBrains decompiler
// Type: Messages.MSMessagesAppViewController
// Assembly: Xamarin.iOS, Version=0.0.0.0, Culture=neutral, PublicKeyToken=84e04ff9cfb79065
// MVID: C8F9325D-2858-4AB5-85F0-D14D74730363
// Assembly location: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\ReferenceAssemblies\Microsoft\Framework\Xamarin.iOS\v1.0\Xamarin.iOS.dll

using CoreGraphics;
using Foundation;
using ObjCRuntime;
using System;
using System.ComponentModel;
using UIKit;

namespace Messages
{
  /// <summary>A <see cref="T:Speech.UIViewController" /> that, when extended by the developer, is used to present a custom user-experience within the Messages app.</summary>
  /// <remarks>To be added.</remarks>
  /// <related type="PlatformDocAPI" href="https://developer.apple.com/reference/Messages/MSMessagesAppViewController">Apple documentation for <c>MSMessagesAppViewController</c></related>
  [Register("MSMessagesAppViewController", true)]
  [Introduced(PlatformName.iOS, 10, 0, PlatformArchitecture.All, null)]
  public class MSMessagesAppViewController : 
    UIViewController,
    IMSMessagesAppTranscriptPresentation,
    INativeObject,
    IDisposable
  {
    /// <summary>The handle for this class.</summary>
    /// <value>The pointer to the Objective-C class.</value>
    /// <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
    public override IntPtr ClassHandle { get; }
    /// <summary>Default constructor, initializes a new instance of this class.</summary>
    /// <remarks />
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [Export("init")]
    public MSMessagesAppViewController();
    /// <param name="coder">The unarchiver object.</param>
    /// <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
    /// <remarks>
    ///   <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
    ///   <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
    ///   <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
    /// </remarks>
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    [DesignatedInitializer]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [Export("initWithCoder:")]
    public MSMessagesAppViewController(NSCoder coder);
    /// <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
    /// <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
    /// <remarks>
    ///         <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
    ///         <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
    ///         <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
    ///         <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
    ///         <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
    ///         <example>
    ///           <code lang="C#"><![CDATA[
    /// //
    /// // The NSObjectFlag merely allocates the object and registers the
    /// // C# class with the Objective-C runtime if necessary, but no actual
    /// // initXxx method is invoked, that is done later in the constructor
    /// //
    /// // This is taken from Xamarin.iOS's source code:
    /// //
    /// [Export ("initWithFrame:")]
    /// public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
    /// {
    /// // Invoke the init method now.
    /// 	var initWithFrame = new Selector ("initWithFrame:").Handle;
    /// 	if (IsDirectBinding)
    /// 		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
    /// 	else
    /// 		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
    /// }
    /// ]]></code>
    ///         </example>
    ///       </remarks>
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    protected MSMessagesAppViewController(NSObjectFlag t);
    /// <param name="handle">Pointer (handle) to the unmanaged object.</param>
    /// <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
    /// <remarks>
    ///   <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
    /// </remarks>
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    protected internal MSMessagesAppViewController(IntPtr handle);
    /// <param name="nibName">
    ///   <para>To be added.</para>
    ///   <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
    /// </param>
    /// <param name="bundle">
    ///   <para>To be added.</para>
    ///   <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
    /// </param>
    /// <summary>To be added.</summary>
    /// <remarks>To be added.</remarks>
    [Export("initWithNibName:bundle:")]
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    public MSMessagesAppViewController(string nibName, NSBundle bundle);
    /// <param name="conversation">To be added.</param>
    /// <summary>Called by the system after this controller has become active.</summary>
    /// <remarks>To be added.</remarks>
    [Export("didBecomeActiveWithConversation:")]
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    public virtual void DidBecomeActive(MSConversation conversation);
    /// <param name="message">To be added.</param>
    /// <param name="conversation">To be added.</param>
    /// <summary>Called by the system after the <paramref name="message" /> has been canceled.</summary>
    /// <remarks>To be added.</remarks>
    [Export("didCancelSendingMessage:conversation:")]
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    public virtual void DidCancelSendingMessage(MSMessage message, MSConversation conversation);
    /// <param name="message">To be added.</param>
    /// <param name="conversation">To be added.</param>
    /// <summary>Called by the system after the <paramref name="message" /> has been received.</summary>
    /// <remarks>To be added.</remarks>
    [Export("didReceiveMessage:conversation:")]
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    public virtual void DidReceiveMessage(MSMessage message, MSConversation conversation);
    /// <param name="conversation">To be added.</param>
    /// <summary>Called by the system after the <paramref name="conversation" /> has become inactive.</summary>
    /// <remarks>To be added.</remarks>
    [Export("didResignActiveWithConversation:")]
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    public virtual void DidResignActive(MSConversation conversation);
    /// <param name="message">To be added.</param>
    /// <param name="conversation">To be added.</param>
    /// <summary>Called by the system to indicate the user has selected <paramref name="message" />.</summary>
    /// <remarks>To be added.</remarks>
    [Export("didSelectMessage:conversation:")]
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    public virtual void DidSelectMessage(MSMessage message, MSConversation conversation);
    /// <param name="message">To be added.</param>
    /// <param name="conversation">To be added.</param>
    /// <summary>Called by the system when <paramref name="message" /> is being transmitted.</summary>
    /// <remarks>To be added.</remarks>
    [Export("didStartSendingMessage:conversation:")]
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    public virtual void DidStartSendingMessage(MSMessage message, MSConversation conversation);
    /// <param name="presentationStyle">To be added.</param>
    /// <summary>Called by the system to indicate a transition to <paramref name="presentationStyle" />.</summary>
    /// <remarks>To be added.</remarks>
    [Export("didTransitionToPresentationStyle:")]
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    public virtual void DidTransition(MSMessagesAppPresentationStyle presentationStyle);
    /// <summary>To be added.</summary>
    /// <remarks>To be added.</remarks>
    [Export("dismiss")]
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    public virtual void Dismiss();
    /// <param name="size">To be added.</param>
    /// <summary>To be added.</summary>
    /// <returns>To be added.</returns>
    /// <remarks>To be added.</remarks>
    [Export("contentSizeThatFits:")]
    [Introduced(PlatformName.iOS, 11, 0, PlatformArchitecture.All, null)]
    [Introduced(PlatformName.iOS, 11, 0, PlatformArchitecture.All, null)]
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    public virtual CGSize GetContentSizeThatFits(CGSize size);
    /// <param name="presentationStyle">To be added.</param>
    /// <summary>Requests that the presentation style change to <paramref name="presentationStyle" />.</summary>
    /// <remarks>To be added.</remarks>
    [Export("requestPresentationStyle:")]
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    public virtual void Request(MSMessagesAppPresentationStyle presentationStyle);
    /// <param name="conversation">To be added.</param>
    /// <summary>Called by the system shortly before <paramref name="conversation" /> becomes active.</summary>
    /// <remarks>To be added.</remarks>
    [Export("willBecomeActiveWithConversation:")]
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    public virtual void WillBecomeActive(MSConversation conversation);
    /// <param name="conversation">To be added.</param>
    /// <summary>Called by the system prior to <paramref name="conversation" /> becoming inactive.</summary>
    /// <remarks>To be added.</remarks>
    [Export("willResignActiveWithConversation:")]
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    public virtual void WillResignActive(MSConversation conversation);
    /// <param name="message">To be added.</param>
    /// <param name="conversation">To be added.</param>
    /// <summary>Indicates that the system will make <paramref name="message" /> active. </summary>
    /// <remarks>To be added.</remarks>
    [Export("willSelectMessage:conversation:")]
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    public virtual void WillSelectMessage(MSMessage message, MSConversation conversation);
    /// <param name="presentationStyle">To be added.</param>
    /// <summary>Indicates that this controller will transition to <paramref name="presentationStyle" />.</summary>
    /// <remarks>To be added.</remarks>
    [Export("willTransitionToPresentationStyle:")]
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    public virtual void WillTransition(MSMessagesAppPresentationStyle presentationStyle);
    /// <summary>The currently active <see cref="T:Messages.MSConversation" />.</summary>
    /// <value>
    ///   <para>(More documentation for this node is coming)</para>
    ///   <para tool="nullallowed">This value can be <see langword="null" />.</para>
    /// </value>
    /// <remarks>To be added.</remarks>
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    public virtual MSConversation ActiveConversation { [Export("activeConversation", ArgumentSemantic.Retain)] get; }
    /// <summary />
    /// <remarks />
    /// <value />
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    [Introduced(PlatformName.iOS, 12, 0, PlatformArchitecture.All, null)]
    public virtual MSMessagesAppPresentationContext PresentationContext { [Introduced(PlatformName.iOS, 12, 0, PlatformArchitecture.All, null), Export("presentationContext")] get; }
    /// <summary>The active <see cref="T:MSMessagesAppPresentationStyle" />.</summary>
    /// <value>To be added.</value>
    /// <remarks>To be added.</remarks>
    [BindingImpl(BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
    public virtual MSMessagesAppPresentationStyle PresentationStyle { [Export("presentationStyle", ArgumentSemantic.Assign)] get; }
  }
}
